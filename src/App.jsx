import './App.css'
import { useState, useEffect } from 'react'
import { Code, Play, RotateCcw, CheckCircle, ArrowLeft } from "lucide-react"
import CodeMirror from '@uiw/react-codemirror'
import { javascript } from '@codemirror/lang-javascript'
import { dracula } from '@uiw/codemirror-theme-dracula'


function App() {

  const [aiReady, setAiReady] = useState(false);
  const [questionData, setQuestionData] = useState(null);
  const [code, setCode] = useState(
    `function() {\n // Your code here\n}`
  );
  const [feedback, setFeedback] = useState("");
  const [loading, setLoading] = useState(false);
  const [solved, setSolved] = useState(false);
  const [difficulty, setDifficulty] = useState("");
  const [warning, setWarning] = useState("");

  useEffect(() => {
    const checkReady = setInterval(() => {
      if (puter?.ai?.chat) {
        setAiReady(true);
        clearInterval(checkReady);
      }
    }, 300)
    return () => clearInterval(checkReady);
  }, []);

  const handleDifficultySelect = (level) => {
    setDifficulty(level);
    if (warning) setWarning("");
  }

  const generateQuestion = async () => {
    const validLevels = ["Beginner", "Medium", "Intermediate"];
    if (!validLevels.includes(difficulty)) {
      setWarning("⚠️ Please select a difficulty level before generating question.");
      return;
    }

    setWarning("");
    setLoading(true);
    setFeedback("");
    setSolved(false);
    setCode(`function() {\n // Your code here\n}`);
    setQuestionData(null);


    try {
      const res = await puter.ai.chat(
        `
          Generate a random ${difficulty} level coding interview question like on leetCode. Return ONLY valid JSON with this structure:
          {
            "problem": "string",
            "example": "string",
            "constraints": "string",
            "note": "string or empty if none",
          }
        `
      )

      const reply = typeof res == "string" ? res : res?.message?.content || "";
      const parsed = JSON.parse(reply);

      setQuestionData(parsed);
      console.log(parsed);


    } catch (err) {
      setFeedback(`❌ Error: ${err.message}`);
    }

    setLoading(false)
  }

  const checkSolution = async () => {
    if (!code.trim()) return;

    setLoading(true);

    try {
      const res = await puter.ai.chat(
        `
          You are helpful interview coach. 
          The question is: "${questionData.problem}". Here is the user's solution: "${code}"
          1. If correct, respond with "✅ Correct! Well done."
          2. If wrong, give hints but don't reveal the full answer.
        `
      )

      const reply = typeof res === "string" ? res : res.message.content || "";
      setFeedback(reply);
      if (reply.includes("✅ Correct!")) setSolved(true);


    } catch (err) {
      setFeedback(`❌ Error: ${err.message}`);
    }

    setLoading(false);
  }

  return (
    <main className='min-h-screen bg-gradient-to-br from-sky-900 via-slate-900 to-emerald-900 flex flex-col items-center justify-center p-6 gap-10'>
      <h1 className='text-[2.6rem] sm:text-8xl font-bold bg-gradient-to-r from-emerald-400 via-sky-300 to-blue-500 bg-clip-text text-transparent text-center'>AI Interview Coach</h1>

      <div className='w-full max-w-7xl flex flex-col justify-center items-center'>
        {!questionData ? (

          <div className='w-full max-w-md p-5 md:p-10 bg-gray-900/80 backdrop-blur-md border border-gray-700 rounded-3xl shadow-lg shadow-sky-600 hover:shadow-sky-300 hover:shadow-2xl transition duration-300 text-center'>
            <Code className='mx-auto mb-2 md:mb-6 text-cyan-400 w-24 h-24' />
            <h2 className='text-3xl font-semibold text-white mb-6'>Ready to practice?</h2>
            <p className='text-slate-300 mb-8 text-lg leading-relaxed'>Solve coding interview questions generated by AI, get hints and improve your skills.</p>

            <div className='mb-8'>
              <p className='text-sky-400 mb-4 text-lg font-semibold text-left'>Select Difficulty:</p>
              <div className='flex justify-center gap-3 flex-wrap sm:flex-nowrap'>
                {["Beginner", "Medium", "Intermediate"].map((level) => (
                  <button key={level} onClick={() => handleDifficultySelect(level)} className={`px-6 py-3 rounded-full font-semibold transition-colors duration-200 cursor-pointer ${difficulty === level ? "bg-blue-500 text-white shadow-md" : "bg-gray-700 text-gray-300 hover:bg-gray-600"}`}>{level}</button>
                ))}
              </div>
            </div>

            {warning && <p className='text-red-500 font-semibold mb-4'>{warning}</p>}

            <button
              onClick={generateQuestion}
              disabled={!aiReady || loading}
              className='w-full md:px-10 py-4 bg-gradient-to-r from-sky-400 to-emerald-400 hover:from-sky-500 hover:to-emerald-500 text-white font-semibold text-lg rounded-3xl shadow-lg transition duration-300 disabled:opacity-50 disabled:cursor-not-allowed'
            >
              {loading ? "Generating.." : "Generate Question"}
            </button>
          </div>

        ) : (
          <div className='space-y-6 w-full'>
            <div className='grid lg:grid-cols-2 gap-6'>
              <div className='bg-gradient-to-br from-blue-950/40 to bg-sky-950/50 backdrop-blur-sm border border-indigo-400/30 rounded-2xl shadow-2xl p-4 md:p-8 space-y-4'>
                <div>
                  <h3 className='text-lg font-semibold text-emerald-300 mb-1'>Problem</h3>
                  <p className='text-gray-200'>{questionData.problem}</p>
                </div>

                <div>
                  <h3 className='text-lg font-semibold text-emerald-300 mb-1'>Example</h3>
                  <pre className='bg-black/30 p-3 rounded text-gray-200 whitespace-pre-wrap'>{questionData.example}</pre>
                </div>

                <div>
                  <h3 className='text-lg font-semibold text-emerald-300 mb-1'>Constraints</h3>
                  <ul className='list-disc list-inside text-gray-200'>
                    {questionData.constraints.split("\n").map((line, idx) => (
                      <li key={idx}>{line}</li>
                    ))}
                  </ul>
                </div>

                {questionData.note && (
                  <div>
                    <h3 className='text-lg font-semibold text-emerald-300 mb-1'>Note</h3>
                    <p className='text-gray-200'>{questionData.note}</p>
                  </div>
                )}
              </div>

              {/* Coding Section */}
              <div className='bg-gray-800/60 border border-gray-700/50 rounded-2xl shadow-2xl overflow-hidden'>
                <div className='bg-gray-900/90 px-4 py-3 border-b border-gray-700/50 flex items-center gap-3'>
                  <Code className='w-5 h-5 text-emerald-400' />
                  <h3 className='text-lg font-semibold text-white'>Solution:</h3>
                </div>
                <CodeMirror
                  value={code}
                  height='550px'
                  extensions={[javascript({ jsx: true })]}
                  theme={dracula}
                  onChange={(value) => setCode(value)}
                />
              </div>
            </div>

            <div className='flex gap-6 lg:gap-10 justify-center items-center flex-col lg:flex-row'>
              <div className='flex flex-wrap gap-3 justify-center items-center'>
                <button
                  onClick={checkSolution}
                  disabled={loading || !aiReady || !code.trim()}
                  className='px-6 py-3 bg-gradient-to-r from-blue-500 to-emerald-500 hover:opacity-80 text-white font-semibold rounded-2xl transition-all duration-300 disabled:opacity-50 flex items-center justify-center gap-2 cursor-pointer'
                >
                  <Play className='h-5 w-5' />
                  {loading ? "Checking..." : "Check Solution"}
                </button>

                <button
                  onClick={generateQuestion}
                  disabled={loading || !aiReady}
                  className='px-6 py-3 bg-gradient-to-r from-purple-500 to-pink-500 hover:opacity-80 text-white font-semibold rounded-2xl transition-all duration-300 disabled:opacity-50 flex items-center justify-center gap-2 cursor-pointer'
                >
                  <RotateCcw className='h-5 w-5' />
                  {loading ? "Generating..." : "New Question"}
                </button>

                <button
                  onClick={() => {
                    setQuestionData(null);
                    setCode(`function() {\n // Your code here\n}`)
                    setFeedback("");
                    setLoading(false);
                    setWarning("");
                    setDifficulty("");
                  }}
                  disabled={loading}
                  className='px-6 py-3 bg-gradient-to-r from-red-500 to-amber-500 hover:opacity-80 text-white font-semibold rounded-2xl transition-all duration-300 disabled:opacity-50 flex items-center justify-center gap-2 cursor-pointer'
                >
                  <ArrowLeft className='h-5 w-5' />
                  Go Back
                </button>
              </div>

              <div className='flex gap-3 items-center flex-wrap'>
                <p className='text-slate-300 font-semibold'>Difficulty:</p>
                <div className='flex gap-1 md:gap-3'>
                  {["Beginner", "Medium", "Intermediate"].map((level) => (
                    <button key={level} onClick={() => handleDifficultySelect(level)} className={`px-4 py-2 rounded-full font-semibold transition-colors duration-200 cursor-pointer text-sm md:text-lg ${difficulty === level ? "bg-blue-500 text-white shadow-md" : "bg-gray-700 text-gray-300 hover:bg-gray-600"}`}>{level}</button>
                  ))}
                </div>
              </div>
            </div>

            {feedback && (
              <div className={`rounded-3xl p-3 md:p-6 shadow-2xl backdrop-blur-sm ${feedback.includes("✅") ? "bg-green-900/40 border border-green-500/30" : feedback.includes("❌") ? "bg-red-900/40 border border-red-500/30" : "bg-gray-800/30 border border-gray-700/50"}`}>
                <div className='flex items-start gap-4'>
                  <CheckCircle className={`h-6 w-6 ${feedback.includes("✅") ? "text-green-400" : feedback.includes("❌") ? "text-red-400" : "text-blue-400"}`} />
                  <div className='flex-1 text-gray-200 whitespace-pre-wrap leading-relaxed'>{feedback}</div>
                </div>
              </div>
            )}
          </div>
        )}
      </div>
    </main>
  )
}

export default App
